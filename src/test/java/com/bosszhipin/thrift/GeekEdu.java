/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bosszhipin.thrift;

import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-26")
public class GeekEdu implements org.apache.thrift.TBase<GeekEdu, GeekEdu._Fields>, java.io.Serializable, Cloneable, Comparable<GeekEdu> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GeekEdu");

  private static final org.apache.thrift.protocol.TField SCHOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("school", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MAJOR_FIELD_DESC = new org.apache.thrift.protocol.TField("major", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GeekEduStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GeekEduTupleSchemeFactory());
  }

  public String school; // required
  public String major; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCHOOL((short)1, "school"),
    MAJOR((short)2, "major");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCHOOL
          return SCHOOL;
        case 2: // MAJOR
          return MAJOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCHOOL, new org.apache.thrift.meta_data.FieldMetaData("school", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAJOR, new org.apache.thrift.meta_data.FieldMetaData("major", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GeekEdu.class, metaDataMap);
  }

  public GeekEdu() {
  }

  public GeekEdu(
    String school,
    String major)
  {
    this();
    this.school = school;
    this.major = major;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GeekEdu(GeekEdu other) {
    if (other.isSetSchool()) {
      this.school = other.school;
    }
    if (other.isSetMajor()) {
      this.major = other.major;
    }
  }

  public GeekEdu deepCopy() {
    return new GeekEdu(this);
  }

  @Override
  public void clear() {
    this.school = null;
    this.major = null;
  }

  public String getSchool() {
    return this.school;
  }

  public GeekEdu setSchool(String school) {
    this.school = school;
    return this;
  }

  public void unsetSchool() {
    this.school = null;
  }

  /** Returns true if field school is set (has been assigned a value) and false otherwise */
  public boolean isSetSchool() {
    return this.school != null;
  }

  public void setSchoolIsSet(boolean value) {
    if (!value) {
      this.school = null;
    }
  }

  public String getMajor() {
    return this.major;
  }

  public GeekEdu setMajor(String major) {
    this.major = major;
    return this;
  }

  public void unsetMajor() {
    this.major = null;
  }

  /** Returns true if field major is set (has been assigned a value) and false otherwise */
  public boolean isSetMajor() {
    return this.major != null;
  }

  public void setMajorIsSet(boolean value) {
    if (!value) {
      this.major = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SCHOOL:
      if (value == null) {
        unsetSchool();
      } else {
        setSchool((String)value);
      }
      break;

    case MAJOR:
      if (value == null) {
        unsetMajor();
      } else {
        setMajor((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SCHOOL:
      return getSchool();

    case MAJOR:
      return getMajor();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SCHOOL:
      return isSetSchool();
    case MAJOR:
      return isSetMajor();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GeekEdu)
      return this.equals((GeekEdu)that);
    return false;
  }

  public boolean equals(GeekEdu that) {
    if (that == null)
      return false;

    boolean this_present_school = true && this.isSetSchool();
    boolean that_present_school = true && that.isSetSchool();
    if (this_present_school || that_present_school) {
      if (!(this_present_school && that_present_school))
        return false;
      if (!this.school.equals(that.school))
        return false;
    }

    boolean this_present_major = true && this.isSetMajor();
    boolean that_present_major = true && that.isSetMajor();
    if (this_present_major || that_present_major) {
      if (!(this_present_major && that_present_major))
        return false;
      if (!this.major.equals(that.major))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_school = true && (isSetSchool());
    list.add(present_school);
    if (present_school)
      list.add(school);

    boolean present_major = true && (isSetMajor());
    list.add(present_major);
    if (present_major)
      list.add(major);

    return list.hashCode();
  }

  @Override
  public int compareTo(GeekEdu other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSchool()).compareTo(other.isSetSchool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.school, other.school);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMajor()).compareTo(other.isSetMajor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMajor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.major, other.major);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GeekEdu(");
    boolean first = true;

    sb.append("school:");
    if (this.school == null) {
      sb.append("null");
    } else {
      sb.append(this.school);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("major:");
    if (this.major == null) {
      sb.append("null");
    } else {
      sb.append(this.major);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (school == null) {
      throw new TProtocolException("Required field 'school' was not present! Struct: " + toString());
    }
    if (major == null) {
      throw new TProtocolException("Required field 'major' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GeekEduStandardSchemeFactory implements SchemeFactory {
    public GeekEduStandardScheme getScheme() {
      return new GeekEduStandardScheme();
    }
  }

  private static class GeekEduStandardScheme extends StandardScheme<GeekEdu> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GeekEdu struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCHOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.school = iprot.readString();
              struct.setSchoolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAJOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.major = iprot.readString();
              struct.setMajorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GeekEdu struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.school != null) {
        oprot.writeFieldBegin(SCHOOL_FIELD_DESC);
        oprot.writeString(struct.school);
        oprot.writeFieldEnd();
      }
      if (struct.major != null) {
        oprot.writeFieldBegin(MAJOR_FIELD_DESC);
        oprot.writeString(struct.major);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GeekEduTupleSchemeFactory implements SchemeFactory {
    public GeekEduTupleScheme getScheme() {
      return new GeekEduTupleScheme();
    }
  }

  private static class GeekEduTupleScheme extends TupleScheme<GeekEdu> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GeekEdu struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.school);
      oprot.writeString(struct.major);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GeekEdu struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.school = iprot.readString();
      struct.setSchoolIsSet(true);
      struct.major = iprot.readString();
      struct.setMajorIsSet(true);
    }
  }

}

