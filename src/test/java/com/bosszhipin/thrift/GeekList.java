/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bosszhipin.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-26")
public class GeekList implements org.apache.thrift.TBase<GeekList, GeekList._Fields>, java.io.Serializable, Cloneable, Comparable<GeekList> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GeekList");

  private static final org.apache.thrift.protocol.TField NUM_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("numFound", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField GEEKS_FIELD_DESC = new org.apache.thrift.protocol.TField("geeks", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("tag", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField QTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("qtime", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GeekListStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GeekListTupleSchemeFactory());
  }

  public int numFound; // required
  public List<Geek> geeks; // required
  public String tag; // optional
  public int qtime; // optional
  public String error; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUM_FOUND((short)1, "numFound"),
    GEEKS((short)2, "geeks"),
    TAG((short)3, "tag"),
    QTIME((short)4, "qtime"),
    ERROR((short)5, "error");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_FOUND
          return NUM_FOUND;
        case 2: // GEEKS
          return GEEKS;
        case 3: // TAG
          return TAG;
        case 4: // QTIME
          return QTIME;
        case 5: // ERROR
          return ERROR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMFOUND_ISSET_ID = 0;
  private static final int __QTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TAG, _Fields.QTIME, _Fields.ERROR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_FOUND, new org.apache.thrift.meta_data.FieldMetaData("numFound", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GEEKS, new org.apache.thrift.meta_data.FieldMetaData("geeks", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Geek.class))));
    tmpMap.put(_Fields.TAG, new org.apache.thrift.meta_data.FieldMetaData("tag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QTIME, new org.apache.thrift.meta_data.FieldMetaData("qtime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GeekList.class, metaDataMap);
  }

  public GeekList() {
    this.qtime = 0;

  }

  public GeekList(
    int numFound,
    List<Geek> geeks)
  {
    this();
    this.numFound = numFound;
    setNumFoundIsSet(true);
    this.geeks = geeks;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GeekList(GeekList other) {
    __isset_bitfield = other.__isset_bitfield;
    this.numFound = other.numFound;
    if (other.isSetGeeks()) {
      List<Geek> __this__geeks = new ArrayList<Geek>(other.geeks.size());
      for (Geek other_element : other.geeks) {
        __this__geeks.add(new Geek(other_element));
      }
      this.geeks = __this__geeks;
    }
    if (other.isSetTag()) {
      this.tag = other.tag;
    }
    this.qtime = other.qtime;
    if (other.isSetError()) {
      this.error = other.error;
    }
  }

  public GeekList deepCopy() {
    return new GeekList(this);
  }

  @Override
  public void clear() {
    setNumFoundIsSet(false);
    this.numFound = 0;
    this.geeks = null;
    this.tag = null;
    this.qtime = 0;

    this.error = null;
  }

  public int getNumFound() {
    return this.numFound;
  }

  public GeekList setNumFound(int numFound) {
    this.numFound = numFound;
    setNumFoundIsSet(true);
    return this;
  }

  public void unsetNumFound() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMFOUND_ISSET_ID);
  }

  /** Returns true if field numFound is set (has been assigned a value) and false otherwise */
  public boolean isSetNumFound() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMFOUND_ISSET_ID);
  }

  public void setNumFoundIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMFOUND_ISSET_ID, value);
  }

  public int getGeeksSize() {
    return (this.geeks == null) ? 0 : this.geeks.size();
  }

  public java.util.Iterator<Geek> getGeeksIterator() {
    return (this.geeks == null) ? null : this.geeks.iterator();
  }

  public void addToGeeks(Geek elem) {
    if (this.geeks == null) {
      this.geeks = new ArrayList<Geek>();
    }
    this.geeks.add(elem);
  }

  public List<Geek> getGeeks() {
    return this.geeks;
  }

  public GeekList setGeeks(List<Geek> geeks) {
    this.geeks = geeks;
    return this;
  }

  public void unsetGeeks() {
    this.geeks = null;
  }

  /** Returns true if field geeks is set (has been assigned a value) and false otherwise */
  public boolean isSetGeeks() {
    return this.geeks != null;
  }

  public void setGeeksIsSet(boolean value) {
    if (!value) {
      this.geeks = null;
    }
  }

  public String getTag() {
    return this.tag;
  }

  public GeekList setTag(String tag) {
    this.tag = tag;
    return this;
  }

  public void unsetTag() {
    this.tag = null;
  }

  /** Returns true if field tag is set (has been assigned a value) and false otherwise */
  public boolean isSetTag() {
    return this.tag != null;
  }

  public void setTagIsSet(boolean value) {
    if (!value) {
      this.tag = null;
    }
  }

  public int getQtime() {
    return this.qtime;
  }

  public GeekList setQtime(int qtime) {
    this.qtime = qtime;
    setQtimeIsSet(true);
    return this;
  }

  public void unsetQtime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QTIME_ISSET_ID);
  }

  /** Returns true if field qtime is set (has been assigned a value) and false otherwise */
  public boolean isSetQtime() {
    return EncodingUtils.testBit(__isset_bitfield, __QTIME_ISSET_ID);
  }

  public void setQtimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QTIME_ISSET_ID, value);
  }

  public String getError() {
    return this.error;
  }

  public GeekList setError(String error) {
    this.error = error;
    return this;
  }

  public void unsetError() {
    this.error = null;
  }

  /** Returns true if field error is set (has been assigned a value) and false otherwise */
  public boolean isSetError() {
    return this.error != null;
  }

  public void setErrorIsSet(boolean value) {
    if (!value) {
      this.error = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUM_FOUND:
      if (value == null) {
        unsetNumFound();
      } else {
        setNumFound((Integer)value);
      }
      break;

    case GEEKS:
      if (value == null) {
        unsetGeeks();
      } else {
        setGeeks((List<Geek>)value);
      }
      break;

    case TAG:
      if (value == null) {
        unsetTag();
      } else {
        setTag((String)value);
      }
      break;

    case QTIME:
      if (value == null) {
        unsetQtime();
      } else {
        setQtime((Integer)value);
      }
      break;

    case ERROR:
      if (value == null) {
        unsetError();
      } else {
        setError((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_FOUND:
      return getNumFound();

    case GEEKS:
      return getGeeks();

    case TAG:
      return getTag();

    case QTIME:
      return getQtime();

    case ERROR:
      return getError();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUM_FOUND:
      return isSetNumFound();
    case GEEKS:
      return isSetGeeks();
    case TAG:
      return isSetTag();
    case QTIME:
      return isSetQtime();
    case ERROR:
      return isSetError();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GeekList)
      return this.equals((GeekList)that);
    return false;
  }

  public boolean equals(GeekList that) {
    if (that == null)
      return false;

    boolean this_present_numFound = true;
    boolean that_present_numFound = true;
    if (this_present_numFound || that_present_numFound) {
      if (!(this_present_numFound && that_present_numFound))
        return false;
      if (this.numFound != that.numFound)
        return false;
    }

    boolean this_present_geeks = true && this.isSetGeeks();
    boolean that_present_geeks = true && that.isSetGeeks();
    if (this_present_geeks || that_present_geeks) {
      if (!(this_present_geeks && that_present_geeks))
        return false;
      if (!this.geeks.equals(that.geeks))
        return false;
    }

    boolean this_present_tag = true && this.isSetTag();
    boolean that_present_tag = true && that.isSetTag();
    if (this_present_tag || that_present_tag) {
      if (!(this_present_tag && that_present_tag))
        return false;
      if (!this.tag.equals(that.tag))
        return false;
    }

    boolean this_present_qtime = true && this.isSetQtime();
    boolean that_present_qtime = true && that.isSetQtime();
    if (this_present_qtime || that_present_qtime) {
      if (!(this_present_qtime && that_present_qtime))
        return false;
      if (this.qtime != that.qtime)
        return false;
    }

    boolean this_present_error = true && this.isSetError();
    boolean that_present_error = true && that.isSetError();
    if (this_present_error || that_present_error) {
      if (!(this_present_error && that_present_error))
        return false;
      if (!this.error.equals(that.error))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_numFound = true;
    list.add(present_numFound);
    if (present_numFound)
      list.add(numFound);

    boolean present_geeks = true && (isSetGeeks());
    list.add(present_geeks);
    if (present_geeks)
      list.add(geeks);

    boolean present_tag = true && (isSetTag());
    list.add(present_tag);
    if (present_tag)
      list.add(tag);

    boolean present_qtime = true && (isSetQtime());
    list.add(present_qtime);
    if (present_qtime)
      list.add(qtime);

    boolean present_error = true && (isSetError());
    list.add(present_error);
    if (present_error)
      list.add(error);

    return list.hashCode();
  }

  @Override
  public int compareTo(GeekList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNumFound()).compareTo(other.isSetNumFound());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumFound()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numFound, other.numFound);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeeks()).compareTo(other.isSetGeeks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeeks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geeks, other.geeks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTag()).compareTo(other.isSetTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag, other.tag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQtime()).compareTo(other.isSetQtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qtime, other.qtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetError()).compareTo(other.isSetError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GeekList(");
    boolean first = true;

    sb.append("numFound:");
    sb.append(this.numFound);
    first = false;
    if (!first) sb.append(", ");
    sb.append("geeks:");
    if (this.geeks == null) {
      sb.append("null");
    } else {
      sb.append(this.geeks);
    }
    first = false;
    if (isSetTag()) {
      if (!first) sb.append(", ");
      sb.append("tag:");
      if (this.tag == null) {
        sb.append("null");
      } else {
        sb.append(this.tag);
      }
      first = false;
    }
    if (isSetQtime()) {
      if (!first) sb.append(", ");
      sb.append("qtime:");
      sb.append(this.qtime);
      first = false;
    }
    if (isSetError()) {
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // alas, we cannot check 'numFound' because it's a primitive and you chose the non-beans generator.
    if (geeks == null) {
      throw new TProtocolException("Required field 'geeks' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GeekListStandardSchemeFactory implements SchemeFactory {
    public GeekListStandardScheme getScheme() {
      return new GeekListStandardScheme();
    }
  }

  private static class GeekListStandardScheme extends StandardScheme<GeekList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GeekList struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM_FOUND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numFound = iprot.readI32();
              struct.setNumFoundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GEEKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.geeks = new ArrayList<Geek>(_list8.size);
                Geek _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new Geek();
                  _elem9.read(iprot);
                  struct.geeks.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setGeeksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tag = iprot.readString();
              struct.setTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.qtime = iprot.readI32();
              struct.setQtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.error = iprot.readString();
              struct.setErrorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNumFound()) {
        throw new TProtocolException("Required field 'numFound' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GeekList struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUM_FOUND_FIELD_DESC);
      oprot.writeI32(struct.numFound);
      oprot.writeFieldEnd();
      if (struct.geeks != null) {
        oprot.writeFieldBegin(GEEKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.geeks.size()));
          for (Geek _iter11 : struct.geeks)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.tag != null) {
        if (struct.isSetTag()) {
          oprot.writeFieldBegin(TAG_FIELD_DESC);
          oprot.writeString(struct.tag);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetQtime()) {
        oprot.writeFieldBegin(QTIME_FIELD_DESC);
        oprot.writeI32(struct.qtime);
        oprot.writeFieldEnd();
      }
      if (struct.error != null) {
        if (struct.isSetError()) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          oprot.writeString(struct.error);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GeekListTupleSchemeFactory implements SchemeFactory {
    public GeekListTupleScheme getScheme() {
      return new GeekListTupleScheme();
    }
  }

  private static class GeekListTupleScheme extends TupleScheme<GeekList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GeekList struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.numFound);
      {
        oprot.writeI32(struct.geeks.size());
        for (Geek _iter12 : struct.geeks)
        {
          _iter12.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetTag()) {
        optionals.set(0);
      }
      if (struct.isSetQtime()) {
        optionals.set(1);
      }
      if (struct.isSetError()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTag()) {
        oprot.writeString(struct.tag);
      }
      if (struct.isSetQtime()) {
        oprot.writeI32(struct.qtime);
      }
      if (struct.isSetError()) {
        oprot.writeString(struct.error);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GeekList struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.numFound = iprot.readI32();
      struct.setNumFoundIsSet(true);
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.geeks = new ArrayList<Geek>(_list13.size);
        Geek _elem14;
        for (int _i15 = 0; _i15 < _list13.size; ++_i15)
        {
          _elem14 = new Geek();
          _elem14.read(iprot);
          struct.geeks.add(_elem14);
        }
      }
      struct.setGeeksIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.tag = iprot.readString();
        struct.setTagIsSet(true);
      }
      if (incoming.get(1)) {
        struct.qtime = iprot.readI32();
        struct.setQtimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.error = iprot.readString();
        struct.setErrorIsSet(true);
      }
    }
  }

}

