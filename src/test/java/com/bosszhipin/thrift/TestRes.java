/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bosszhipin.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-27")
public class TestRes implements org.apache.thrift.TBase<TestRes, TestRes._Fields>, java.io.Serializable, Cloneable, Comparable<TestRes> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TestRes");

  private static final org.apache.thrift.protocol.TField PARAM1_FIELD_DESC = new org.apache.thrift.protocol.TField("param1", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PARAM2_FIELD_DESC = new org.apache.thrift.protocol.TField("param2", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TestResStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TestResTupleSchemeFactory());
  }

  public int param1; // optional
  public String param2; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARAM1((short)1, "param1"),
    PARAM2((short)2, "param2");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARAM1
          return PARAM1;
        case 2: // PARAM2
          return PARAM2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PARAM1_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PARAM1,_Fields.PARAM2};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARAM1, new org.apache.thrift.meta_data.FieldMetaData("param1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARAM2, new org.apache.thrift.meta_data.FieldMetaData("param2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TestRes.class, metaDataMap);
  }

  public TestRes() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TestRes(TestRes other) {
    __isset_bitfield = other.__isset_bitfield;
    this.param1 = other.param1;
    if (other.isSetParam2()) {
      this.param2 = other.param2;
    }
  }

  public TestRes deepCopy() {
    return new TestRes(this);
  }

  @Override
  public void clear() {
    setParam1IsSet(false);
    this.param1 = 0;
    this.param2 = null;
  }

  public int getParam1() {
    return this.param1;
  }

  public TestRes setParam1(int param1) {
    this.param1 = param1;
    setParam1IsSet(true);
    return this;
  }

  public void unsetParam1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARAM1_ISSET_ID);
  }

  /** Returns true if field param1 is set (has been assigned a value) and false otherwise */
  public boolean isSetParam1() {
    return EncodingUtils.testBit(__isset_bitfield, __PARAM1_ISSET_ID);
  }

  public void setParam1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARAM1_ISSET_ID, value);
  }

  public String getParam2() {
    return this.param2;
  }

  public TestRes setParam2(String param2) {
    this.param2 = param2;
    return this;
  }

  public void unsetParam2() {
    this.param2 = null;
  }

  /** Returns true if field param2 is set (has been assigned a value) and false otherwise */
  public boolean isSetParam2() {
    return this.param2 != null;
  }

  public void setParam2IsSet(boolean value) {
    if (!value) {
      this.param2 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARAM1:
      if (value == null) {
        unsetParam1();
      } else {
        setParam1((Integer)value);
      }
      break;

    case PARAM2:
      if (value == null) {
        unsetParam2();
      } else {
        setParam2((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARAM1:
      return getParam1();

    case PARAM2:
      return getParam2();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARAM1:
      return isSetParam1();
    case PARAM2:
      return isSetParam2();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TestRes)
      return this.equals((TestRes)that);
    return false;
  }

  public boolean equals(TestRes that) {
    if (that == null)
      return false;

    boolean this_present_param1 = true && this.isSetParam1();
    boolean that_present_param1 = true && that.isSetParam1();
    if (this_present_param1 || that_present_param1) {
      if (!(this_present_param1 && that_present_param1))
        return false;
      if (this.param1 != that.param1)
        return false;
    }

    boolean this_present_param2 = true && this.isSetParam2();
    boolean that_present_param2 = true && that.isSetParam2();
    if (this_present_param2 || that_present_param2) {
      if (!(this_present_param2 && that_present_param2))
        return false;
      if (!this.param2.equals(that.param2))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_param1 = true && (isSetParam1());
    list.add(present_param1);
    if (present_param1)
      list.add(param1);

    boolean present_param2 = true && (isSetParam2());
    list.add(present_param2);
    if (present_param2)
      list.add(param2);

    return list.hashCode();
  }

  @Override
  public int compareTo(TestRes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetParam1()).compareTo(other.isSetParam1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParam1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param1, other.param1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParam2()).compareTo(other.isSetParam2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParam2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param2, other.param2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TestRes(");
    boolean first = true;

    if (isSetParam1()) {
      sb.append("param1:");
      sb.append(this.param1);
      first = false;
    }
    if (isSetParam2()) {
      if (!first) sb.append(", ");
      sb.append("param2:");
      if (this.param2 == null) {
        sb.append("null");
      } else {
        sb.append(this.param2);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TestResStandardSchemeFactory implements SchemeFactory {
    public TestResStandardScheme getScheme() {
      return new TestResStandardScheme();
    }
  }

  private static class TestResStandardScheme extends StandardScheme<TestRes> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TestRes struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARAM1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.param1 = iprot.readI32();
              struct.setParam1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARAM2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.param2 = iprot.readString();
              struct.setParam2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TestRes struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetParam1()) {
        oprot.writeFieldBegin(PARAM1_FIELD_DESC);
        oprot.writeI32(struct.param1);
        oprot.writeFieldEnd();
      }
      if (struct.param2 != null) {
        if (struct.isSetParam2()) {
          oprot.writeFieldBegin(PARAM2_FIELD_DESC);
          oprot.writeString(struct.param2);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TestResTupleSchemeFactory implements SchemeFactory {
    public TestResTupleScheme getScheme() {
      return new TestResTupleScheme();
    }
  }

  private static class TestResTupleScheme extends TupleScheme<TestRes> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TestRes struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetParam1()) {
        optionals.set(0);
      }
      if (struct.isSetParam2()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetParam1()) {
        oprot.writeI32(struct.param1);
      }
      if (struct.isSetParam2()) {
        oprot.writeString(struct.param2);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TestRes struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.param1 = iprot.readI32();
        struct.setParam1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.param2 = iprot.readString();
        struct.setParam2IsSet(true);
      }
    }
  }

}

