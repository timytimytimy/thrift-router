/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bosszhipin.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-26")
public class Geek implements org.apache.thrift.TBase<Geek, Geek._Fields>, java.io.Serializable, Cloneable, Comparable<Geek> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Geek");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SALARY_FIELD_DESC = new org.apache.thrift.protocol.TField("salary", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EXPERIENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("experience", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PIC_FIELD_DESC = new org.apache.thrift.protocol.TField("pic", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField HEAD_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("headImg", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField EXPECT_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("expectPosition", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField EXPECT_POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("expectPositionId", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField WORK_EDU_FIELD_DESC = new org.apache.thrift.protocol.TField("workEdu", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("score", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField DEBUG_FIELD_DESC = new org.apache.thrift.protocol.TField("debug", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GeekStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GeekTupleSchemeFactory());
  }

  public long id; // required
  public int gender; // optional
  public String name; // optional
  public String salary; // optional
  public String city; // optional
  public String experience; // optional
  public String pic; // optional
  public int headImg; // optional
  public HField expectPosition; // optional
  public long expectPositionId; // optional
  public HField workEdu; // optional
  public HField desc; // optional
  public double score; // optional
  public String debug; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    GENDER((short)2, "gender"),
    NAME((short)3, "name"),
    SALARY((short)4, "salary"),
    CITY((short)5, "city"),
    EXPERIENCE((short)6, "experience"),
    PIC((short)7, "pic"),
    HEAD_IMG((short)8, "headImg"),
    EXPECT_POSITION((short)10, "expectPosition"),
    EXPECT_POSITION_ID((short)11, "expectPositionId"),
    WORK_EDU((short)12, "workEdu"),
    DESC((short)13, "desc"),
    SCORE((short)16, "score"),
    DEBUG((short)17, "debug");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // GENDER
          return GENDER;
        case 3: // NAME
          return NAME;
        case 4: // SALARY
          return SALARY;
        case 5: // CITY
          return CITY;
        case 6: // EXPERIENCE
          return EXPERIENCE;
        case 7: // PIC
          return PIC;
        case 8: // HEAD_IMG
          return HEAD_IMG;
        case 10: // EXPECT_POSITION
          return EXPECT_POSITION;
        case 11: // EXPECT_POSITION_ID
          return EXPECT_POSITION_ID;
        case 12: // WORK_EDU
          return WORK_EDU;
        case 13: // DESC
          return DESC;
        case 16: // SCORE
          return SCORE;
        case 17: // DEBUG
          return DEBUG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __GENDER_ISSET_ID = 1;
  private static final int __HEADIMG_ISSET_ID = 2;
  private static final int __EXPECTPOSITIONID_ISSET_ID = 3;
  private static final int __SCORE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.GENDER, _Fields.NAME, _Fields.SALARY, _Fields.CITY, _Fields.EXPERIENCE, _Fields.PIC, _Fields.HEAD_IMG, _Fields.EXPECT_POSITION, _Fields.EXPECT_POSITION_ID, _Fields.WORK_EDU, _Fields.DESC, _Fields.SCORE, _Fields.DEBUG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SALARY, new org.apache.thrift.meta_data.FieldMetaData("salary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPERIENCE, new org.apache.thrift.meta_data.FieldMetaData("experience", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PIC, new org.apache.thrift.meta_data.FieldMetaData("pic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HEAD_IMG, new org.apache.thrift.meta_data.FieldMetaData("headImg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXPECT_POSITION, new org.apache.thrift.meta_data.FieldMetaData("expectPosition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HField.class)));
    tmpMap.put(_Fields.EXPECT_POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("expectPositionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WORK_EDU, new org.apache.thrift.meta_data.FieldMetaData("workEdu", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HField.class)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HField.class)));
    tmpMap.put(_Fields.SCORE, new org.apache.thrift.meta_data.FieldMetaData("score", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEBUG, new org.apache.thrift.meta_data.FieldMetaData("debug", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Geek.class, metaDataMap);
  }

  public Geek() {
  }

  public Geek(
    long id)
  {
    this();
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Geek(Geek other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.gender = other.gender;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetSalary()) {
      this.salary = other.salary;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetExperience()) {
      this.experience = other.experience;
    }
    if (other.isSetPic()) {
      this.pic = other.pic;
    }
    this.headImg = other.headImg;
    if (other.isSetExpectPosition()) {
      this.expectPosition = new HField(other.expectPosition);
    }
    this.expectPositionId = other.expectPositionId;
    if (other.isSetWorkEdu()) {
      this.workEdu = new HField(other.workEdu);
    }
    if (other.isSetDesc()) {
      this.desc = new HField(other.desc);
    }
    this.score = other.score;
    if (other.isSetDebug()) {
      this.debug = other.debug;
    }
  }

  public Geek deepCopy() {
    return new Geek(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setGenderIsSet(false);
    this.gender = 0;
    this.name = null;
    this.salary = null;
    this.city = null;
    this.experience = null;
    this.pic = null;
    setHeadImgIsSet(false);
    this.headImg = 0;
    this.expectPosition = null;
    setExpectPositionIdIsSet(false);
    this.expectPositionId = 0;
    this.workEdu = null;
    this.desc = null;
    setScoreIsSet(false);
    this.score = 0.0;
    this.debug = null;
  }

  public long getId() {
    return this.id;
  }

  public Geek setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getGender() {
    return this.gender;
  }

  public Geek setGender(int gender) {
    this.gender = gender;
    setGenderIsSet(true);
    return this;
  }

  public void unsetGender() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return EncodingUtils.testBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  public void setGenderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GENDER_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public Geek setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getSalary() {
    return this.salary;
  }

  public Geek setSalary(String salary) {
    this.salary = salary;
    return this;
  }

  public void unsetSalary() {
    this.salary = null;
  }

  /** Returns true if field salary is set (has been assigned a value) and false otherwise */
  public boolean isSetSalary() {
    return this.salary != null;
  }

  public void setSalaryIsSet(boolean value) {
    if (!value) {
      this.salary = null;
    }
  }

  public String getCity() {
    return this.city;
  }

  public Geek setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public String getExperience() {
    return this.experience;
  }

  public Geek setExperience(String experience) {
    this.experience = experience;
    return this;
  }

  public void unsetExperience() {
    this.experience = null;
  }

  /** Returns true if field experience is set (has been assigned a value) and false otherwise */
  public boolean isSetExperience() {
    return this.experience != null;
  }

  public void setExperienceIsSet(boolean value) {
    if (!value) {
      this.experience = null;
    }
  }

  public String getPic() {
    return this.pic;
  }

  public Geek setPic(String pic) {
    this.pic = pic;
    return this;
  }

  public void unsetPic() {
    this.pic = null;
  }

  /** Returns true if field pic is set (has been assigned a value) and false otherwise */
  public boolean isSetPic() {
    return this.pic != null;
  }

  public void setPicIsSet(boolean value) {
    if (!value) {
      this.pic = null;
    }
  }

  public int getHeadImg() {
    return this.headImg;
  }

  public Geek setHeadImg(int headImg) {
    this.headImg = headImg;
    setHeadImgIsSet(true);
    return this;
  }

  public void unsetHeadImg() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEADIMG_ISSET_ID);
  }

  /** Returns true if field headImg is set (has been assigned a value) and false otherwise */
  public boolean isSetHeadImg() {
    return EncodingUtils.testBit(__isset_bitfield, __HEADIMG_ISSET_ID);
  }

  public void setHeadImgIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEADIMG_ISSET_ID, value);
  }

  public HField getExpectPosition() {
    return this.expectPosition;
  }

  public Geek setExpectPosition(HField expectPosition) {
    this.expectPosition = expectPosition;
    return this;
  }

  public void unsetExpectPosition() {
    this.expectPosition = null;
  }

  /** Returns true if field expectPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetExpectPosition() {
    return this.expectPosition != null;
  }

  public void setExpectPositionIsSet(boolean value) {
    if (!value) {
      this.expectPosition = null;
    }
  }

  public long getExpectPositionId() {
    return this.expectPositionId;
  }

  public Geek setExpectPositionId(long expectPositionId) {
    this.expectPositionId = expectPositionId;
    setExpectPositionIdIsSet(true);
    return this;
  }

  public void unsetExpectPositionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPECTPOSITIONID_ISSET_ID);
  }

  /** Returns true if field expectPositionId is set (has been assigned a value) and false otherwise */
  public boolean isSetExpectPositionId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPECTPOSITIONID_ISSET_ID);
  }

  public void setExpectPositionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPECTPOSITIONID_ISSET_ID, value);
  }

  public HField getWorkEdu() {
    return this.workEdu;
  }

  public Geek setWorkEdu(HField workEdu) {
    this.workEdu = workEdu;
    return this;
  }

  public void unsetWorkEdu() {
    this.workEdu = null;
  }

  /** Returns true if field workEdu is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkEdu() {
    return this.workEdu != null;
  }

  public void setWorkEduIsSet(boolean value) {
    if (!value) {
      this.workEdu = null;
    }
  }

  public HField getDesc() {
    return this.desc;
  }

  public Geek setDesc(HField desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public double getScore() {
    return this.score;
  }

  public Geek setScore(double score) {
    this.score = score;
    setScoreIsSet(true);
    return this;
  }

  public void unsetScore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  /** Returns true if field score is set (has been assigned a value) and false otherwise */
  public boolean isSetScore() {
    return EncodingUtils.testBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  public void setScoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCORE_ISSET_ID, value);
  }

  public String getDebug() {
    return this.debug;
  }

  public Geek setDebug(String debug) {
    this.debug = debug;
    return this;
  }

  public void unsetDebug() {
    this.debug = null;
  }

  /** Returns true if field debug is set (has been assigned a value) and false otherwise */
  public boolean isSetDebug() {
    return this.debug != null;
  }

  public void setDebugIsSet(boolean value) {
    if (!value) {
      this.debug = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SALARY:
      if (value == null) {
        unsetSalary();
      } else {
        setSalary((String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case EXPERIENCE:
      if (value == null) {
        unsetExperience();
      } else {
        setExperience((String)value);
      }
      break;

    case PIC:
      if (value == null) {
        unsetPic();
      } else {
        setPic((String)value);
      }
      break;

    case HEAD_IMG:
      if (value == null) {
        unsetHeadImg();
      } else {
        setHeadImg((Integer)value);
      }
      break;

    case EXPECT_POSITION:
      if (value == null) {
        unsetExpectPosition();
      } else {
        setExpectPosition((HField)value);
      }
      break;

    case EXPECT_POSITION_ID:
      if (value == null) {
        unsetExpectPositionId();
      } else {
        setExpectPositionId((Long)value);
      }
      break;

    case WORK_EDU:
      if (value == null) {
        unsetWorkEdu();
      } else {
        setWorkEdu((HField)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((HField)value);
      }
      break;

    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((Double)value);
      }
      break;

    case DEBUG:
      if (value == null) {
        unsetDebug();
      } else {
        setDebug((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case GENDER:
      return getGender();

    case NAME:
      return getName();

    case SALARY:
      return getSalary();

    case CITY:
      return getCity();

    case EXPERIENCE:
      return getExperience();

    case PIC:
      return getPic();

    case HEAD_IMG:
      return getHeadImg();

    case EXPECT_POSITION:
      return getExpectPosition();

    case EXPECT_POSITION_ID:
      return getExpectPositionId();

    case WORK_EDU:
      return getWorkEdu();

    case DESC:
      return getDesc();

    case SCORE:
      return getScore();

    case DEBUG:
      return getDebug();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case GENDER:
      return isSetGender();
    case NAME:
      return isSetName();
    case SALARY:
      return isSetSalary();
    case CITY:
      return isSetCity();
    case EXPERIENCE:
      return isSetExperience();
    case PIC:
      return isSetPic();
    case HEAD_IMG:
      return isSetHeadImg();
    case EXPECT_POSITION:
      return isSetExpectPosition();
    case EXPECT_POSITION_ID:
      return isSetExpectPositionId();
    case WORK_EDU:
      return isSetWorkEdu();
    case DESC:
      return isSetDesc();
    case SCORE:
      return isSetScore();
    case DEBUG:
      return isSetDebug();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Geek)
      return this.equals((Geek)that);
    return false;
  }

  public boolean equals(Geek that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_gender = true && this.isSetGender();
    boolean that_present_gender = true && that.isSetGender();
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (this.gender != that.gender)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_salary = true && this.isSetSalary();
    boolean that_present_salary = true && that.isSetSalary();
    if (this_present_salary || that_present_salary) {
      if (!(this_present_salary && that_present_salary))
        return false;
      if (!this.salary.equals(that.salary))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_experience = true && this.isSetExperience();
    boolean that_present_experience = true && that.isSetExperience();
    if (this_present_experience || that_present_experience) {
      if (!(this_present_experience && that_present_experience))
        return false;
      if (!this.experience.equals(that.experience))
        return false;
    }

    boolean this_present_pic = true && this.isSetPic();
    boolean that_present_pic = true && that.isSetPic();
    if (this_present_pic || that_present_pic) {
      if (!(this_present_pic && that_present_pic))
        return false;
      if (!this.pic.equals(that.pic))
        return false;
    }

    boolean this_present_headImg = true && this.isSetHeadImg();
    boolean that_present_headImg = true && that.isSetHeadImg();
    if (this_present_headImg || that_present_headImg) {
      if (!(this_present_headImg && that_present_headImg))
        return false;
      if (this.headImg != that.headImg)
        return false;
    }

    boolean this_present_expectPosition = true && this.isSetExpectPosition();
    boolean that_present_expectPosition = true && that.isSetExpectPosition();
    if (this_present_expectPosition || that_present_expectPosition) {
      if (!(this_present_expectPosition && that_present_expectPosition))
        return false;
      if (!this.expectPosition.equals(that.expectPosition))
        return false;
    }

    boolean this_present_expectPositionId = true && this.isSetExpectPositionId();
    boolean that_present_expectPositionId = true && that.isSetExpectPositionId();
    if (this_present_expectPositionId || that_present_expectPositionId) {
      if (!(this_present_expectPositionId && that_present_expectPositionId))
        return false;
      if (this.expectPositionId != that.expectPositionId)
        return false;
    }

    boolean this_present_workEdu = true && this.isSetWorkEdu();
    boolean that_present_workEdu = true && that.isSetWorkEdu();
    if (this_present_workEdu || that_present_workEdu) {
      if (!(this_present_workEdu && that_present_workEdu))
        return false;
      if (!this.workEdu.equals(that.workEdu))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_score = true && this.isSetScore();
    boolean that_present_score = true && that.isSetScore();
    if (this_present_score || that_present_score) {
      if (!(this_present_score && that_present_score))
        return false;
      if (this.score != that.score)
        return false;
    }

    boolean this_present_debug = true && this.isSetDebug();
    boolean that_present_debug = true && that.isSetDebug();
    if (this_present_debug || that_present_debug) {
      if (!(this_present_debug && that_present_debug))
        return false;
      if (!this.debug.equals(that.debug))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_gender = true && (isSetGender());
    list.add(present_gender);
    if (present_gender)
      list.add(gender);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_salary = true && (isSetSalary());
    list.add(present_salary);
    if (present_salary)
      list.add(salary);

    boolean present_city = true && (isSetCity());
    list.add(present_city);
    if (present_city)
      list.add(city);

    boolean present_experience = true && (isSetExperience());
    list.add(present_experience);
    if (present_experience)
      list.add(experience);

    boolean present_pic = true && (isSetPic());
    list.add(present_pic);
    if (present_pic)
      list.add(pic);

    boolean present_headImg = true && (isSetHeadImg());
    list.add(present_headImg);
    if (present_headImg)
      list.add(headImg);

    boolean present_expectPosition = true && (isSetExpectPosition());
    list.add(present_expectPosition);
    if (present_expectPosition)
      list.add(expectPosition);

    boolean present_expectPositionId = true && (isSetExpectPositionId());
    list.add(present_expectPositionId);
    if (present_expectPositionId)
      list.add(expectPositionId);

    boolean present_workEdu = true && (isSetWorkEdu());
    list.add(present_workEdu);
    if (present_workEdu)
      list.add(workEdu);

    boolean present_desc = true && (isSetDesc());
    list.add(present_desc);
    if (present_desc)
      list.add(desc);

    boolean present_score = true && (isSetScore());
    list.add(present_score);
    if (present_score)
      list.add(score);

    boolean present_debug = true && (isSetDebug());
    list.add(present_debug);
    if (present_debug)
      list.add(debug);

    return list.hashCode();
  }

  @Override
  public int compareTo(Geek other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGender()).compareTo(other.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalary()).compareTo(other.isSetSalary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salary, other.salary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExperience()).compareTo(other.isSetExperience());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperience()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experience, other.experience);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPic()).compareTo(other.isSetPic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pic, other.pic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeadImg()).compareTo(other.isSetHeadImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeadImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headImg, other.headImg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpectPosition()).compareTo(other.isSetExpectPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpectPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expectPosition, other.expectPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpectPositionId()).compareTo(other.isSetExpectPositionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpectPositionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expectPositionId, other.expectPositionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkEdu()).compareTo(other.isSetWorkEdu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkEdu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workEdu, other.workEdu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScore()).compareTo(other.isSetScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score, other.score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebug()).compareTo(other.isSetDebug());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug, other.debug);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Geek(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetGender()) {
      if (!first) sb.append(", ");
      sb.append("gender:");
      sb.append(this.gender);
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetSalary()) {
      if (!first) sb.append(", ");
      sb.append("salary:");
      if (this.salary == null) {
        sb.append("null");
      } else {
        sb.append(this.salary);
      }
      first = false;
    }
    if (isSetCity()) {
      if (!first) sb.append(", ");
      sb.append("city:");
      if (this.city == null) {
        sb.append("null");
      } else {
        sb.append(this.city);
      }
      first = false;
    }
    if (isSetExperience()) {
      if (!first) sb.append(", ");
      sb.append("experience:");
      if (this.experience == null) {
        sb.append("null");
      } else {
        sb.append(this.experience);
      }
      first = false;
    }
    if (isSetPic()) {
      if (!first) sb.append(", ");
      sb.append("pic:");
      if (this.pic == null) {
        sb.append("null");
      } else {
        sb.append(this.pic);
      }
      first = false;
    }
    if (isSetHeadImg()) {
      if (!first) sb.append(", ");
      sb.append("headImg:");
      sb.append(this.headImg);
      first = false;
    }
    if (isSetExpectPosition()) {
      if (!first) sb.append(", ");
      sb.append("expectPosition:");
      if (this.expectPosition == null) {
        sb.append("null");
      } else {
        sb.append(this.expectPosition);
      }
      first = false;
    }
    if (isSetExpectPositionId()) {
      if (!first) sb.append(", ");
      sb.append("expectPositionId:");
      sb.append(this.expectPositionId);
      first = false;
    }
    if (isSetWorkEdu()) {
      if (!first) sb.append(", ");
      sb.append("workEdu:");
      if (this.workEdu == null) {
        sb.append("null");
      } else {
        sb.append(this.workEdu);
      }
      first = false;
    }
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      if (this.desc == null) {
        sb.append("null");
      } else {
        sb.append(this.desc);
      }
      first = false;
    }
    if (isSetScore()) {
      if (!first) sb.append(", ");
      sb.append("score:");
      sb.append(this.score);
      first = false;
    }
    if (isSetDebug()) {
      if (!first) sb.append(", ");
      sb.append("debug:");
      if (this.debug == null) {
        sb.append("null");
      } else {
        sb.append(this.debug);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (expectPosition != null) {
      expectPosition.validate();
    }
    if (workEdu != null) {
      workEdu.validate();
    }
    if (desc != null) {
      desc.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GeekStandardSchemeFactory implements SchemeFactory {
    public GeekStandardScheme getScheme() {
      return new GeekStandardScheme();
    }
  }

  private static class GeekStandardScheme extends StandardScheme<Geek> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Geek struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gender = iprot.readI32();
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SALARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.salary = iprot.readString();
              struct.setSalaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXPERIENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.experience = iprot.readString();
              struct.setExperienceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pic = iprot.readString();
              struct.setPicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HEAD_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.headImg = iprot.readI32();
              struct.setHeadImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EXPECT_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.expectPosition = new HField();
              struct.expectPosition.read(iprot);
              struct.setExpectPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EXPECT_POSITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expectPositionId = iprot.readI64();
              struct.setExpectPositionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // WORK_EDU
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.workEdu = new HField();
              struct.workEdu.read(iprot);
              struct.setWorkEduIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.desc = new HField();
              struct.desc.read(iprot);
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.score = iprot.readDouble();
              struct.setScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DEBUG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.debug = iprot.readString();
              struct.setDebugIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Geek struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.isSetGender()) {
        oprot.writeFieldBegin(GENDER_FIELD_DESC);
        oprot.writeI32(struct.gender);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.salary != null) {
        if (struct.isSetSalary()) {
          oprot.writeFieldBegin(SALARY_FIELD_DESC);
          oprot.writeString(struct.salary);
          oprot.writeFieldEnd();
        }
      }
      if (struct.city != null) {
        if (struct.isSetCity()) {
          oprot.writeFieldBegin(CITY_FIELD_DESC);
          oprot.writeString(struct.city);
          oprot.writeFieldEnd();
        }
      }
      if (struct.experience != null) {
        if (struct.isSetExperience()) {
          oprot.writeFieldBegin(EXPERIENCE_FIELD_DESC);
          oprot.writeString(struct.experience);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pic != null) {
        if (struct.isSetPic()) {
          oprot.writeFieldBegin(PIC_FIELD_DESC);
          oprot.writeString(struct.pic);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHeadImg()) {
        oprot.writeFieldBegin(HEAD_IMG_FIELD_DESC);
        oprot.writeI32(struct.headImg);
        oprot.writeFieldEnd();
      }
      if (struct.expectPosition != null) {
        if (struct.isSetExpectPosition()) {
          oprot.writeFieldBegin(EXPECT_POSITION_FIELD_DESC);
          struct.expectPosition.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExpectPositionId()) {
        oprot.writeFieldBegin(EXPECT_POSITION_ID_FIELD_DESC);
        oprot.writeI64(struct.expectPositionId);
        oprot.writeFieldEnd();
      }
      if (struct.workEdu != null) {
        if (struct.isSetWorkEdu()) {
          oprot.writeFieldBegin(WORK_EDU_FIELD_DESC);
          struct.workEdu.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc != null) {
        if (struct.isSetDesc()) {
          oprot.writeFieldBegin(DESC_FIELD_DESC);
          struct.desc.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetScore()) {
        oprot.writeFieldBegin(SCORE_FIELD_DESC);
        oprot.writeDouble(struct.score);
        oprot.writeFieldEnd();
      }
      if (struct.debug != null) {
        if (struct.isSetDebug()) {
          oprot.writeFieldBegin(DEBUG_FIELD_DESC);
          oprot.writeString(struct.debug);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GeekTupleSchemeFactory implements SchemeFactory {
    public GeekTupleScheme getScheme() {
      return new GeekTupleScheme();
    }
  }

  private static class GeekTupleScheme extends TupleScheme<Geek> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Geek struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.id);
      BitSet optionals = new BitSet();
      if (struct.isSetGender()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetSalary()) {
        optionals.set(2);
      }
      if (struct.isSetCity()) {
        optionals.set(3);
      }
      if (struct.isSetExperience()) {
        optionals.set(4);
      }
      if (struct.isSetPic()) {
        optionals.set(5);
      }
      if (struct.isSetHeadImg()) {
        optionals.set(6);
      }
      if (struct.isSetExpectPosition()) {
        optionals.set(7);
      }
      if (struct.isSetExpectPositionId()) {
        optionals.set(8);
      }
      if (struct.isSetWorkEdu()) {
        optionals.set(9);
      }
      if (struct.isSetDesc()) {
        optionals.set(10);
      }
      if (struct.isSetScore()) {
        optionals.set(11);
      }
      if (struct.isSetDebug()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetGender()) {
        oprot.writeI32(struct.gender);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetSalary()) {
        oprot.writeString(struct.salary);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetExperience()) {
        oprot.writeString(struct.experience);
      }
      if (struct.isSetPic()) {
        oprot.writeString(struct.pic);
      }
      if (struct.isSetHeadImg()) {
        oprot.writeI32(struct.headImg);
      }
      if (struct.isSetExpectPosition()) {
        struct.expectPosition.write(oprot);
      }
      if (struct.isSetExpectPositionId()) {
        oprot.writeI64(struct.expectPositionId);
      }
      if (struct.isSetWorkEdu()) {
        struct.workEdu.write(oprot);
      }
      if (struct.isSetDesc()) {
        struct.desc.write(oprot);
      }
      if (struct.isSetScore()) {
        oprot.writeDouble(struct.score);
      }
      if (struct.isSetDebug()) {
        oprot.writeString(struct.debug);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Geek struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI64();
      struct.setIdIsSet(true);
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.gender = iprot.readI32();
        struct.setGenderIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.salary = iprot.readString();
        struct.setSalaryIsSet(true);
      }
      if (incoming.get(3)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(4)) {
        struct.experience = iprot.readString();
        struct.setExperienceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.pic = iprot.readString();
        struct.setPicIsSet(true);
      }
      if (incoming.get(6)) {
        struct.headImg = iprot.readI32();
        struct.setHeadImgIsSet(true);
      }
      if (incoming.get(7)) {
        struct.expectPosition = new HField();
        struct.expectPosition.read(iprot);
        struct.setExpectPositionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.expectPositionId = iprot.readI64();
        struct.setExpectPositionIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.workEdu = new HField();
        struct.workEdu.read(iprot);
        struct.setWorkEduIsSet(true);
      }
      if (incoming.get(10)) {
        struct.desc = new HField();
        struct.desc.read(iprot);
        struct.setDescIsSet(true);
      }
      if (incoming.get(11)) {
        struct.score = iprot.readDouble();
        struct.setScoreIsSet(true);
      }
      if (incoming.get(12)) {
        struct.debug = iprot.readString();
        struct.setDebugIsSet(true);
      }
    }
  }

}

