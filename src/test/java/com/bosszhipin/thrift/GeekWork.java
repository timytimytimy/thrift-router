/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bosszhipin.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-26")
public class GeekWork implements org.apache.thrift.TBase<GeekWork, GeekWork._Fields>, java.io.Serializable, Cloneable, Comparable<GeekWork> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GeekWork");

  private static final org.apache.thrift.protocol.TField IS_CURRENT_FIELD_DESC = new org.apache.thrift.protocol.TField("isCurrent", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField COMPANY_FIELD_DESC = new org.apache.thrift.protocol.TField("company", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GeekWorkStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GeekWorkTupleSchemeFactory());
  }

  public boolean isCurrent; // required
  public HField company; // required
  public HField position; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_CURRENT((short)1, "isCurrent"),
    COMPANY((short)2, "company"),
    POSITION((short)3, "position");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_CURRENT
          return IS_CURRENT;
        case 2: // COMPANY
          return COMPANY;
        case 3: // POSITION
          return POSITION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISCURRENT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_CURRENT, new org.apache.thrift.meta_data.FieldMetaData("isCurrent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COMPANY, new org.apache.thrift.meta_data.FieldMetaData("company", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HField.class)));
    tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HField.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GeekWork.class, metaDataMap);
  }

  public GeekWork() {
  }

  public GeekWork(
    boolean isCurrent,
    HField company,
    HField position)
  {
    this();
    this.isCurrent = isCurrent;
    setIsCurrentIsSet(true);
    this.company = company;
    this.position = position;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GeekWork(GeekWork other) {
    __isset_bitfield = other.__isset_bitfield;
    this.isCurrent = other.isCurrent;
    if (other.isSetCompany()) {
      this.company = new HField(other.company);
    }
    if (other.isSetPosition()) {
      this.position = new HField(other.position);
    }
  }

  public GeekWork deepCopy() {
    return new GeekWork(this);
  }

  @Override
  public void clear() {
    setIsCurrentIsSet(false);
    this.isCurrent = false;
    this.company = null;
    this.position = null;
  }

  public boolean isIsCurrent() {
    return this.isCurrent;
  }

  public GeekWork setIsCurrent(boolean isCurrent) {
    this.isCurrent = isCurrent;
    setIsCurrentIsSet(true);
    return this;
  }

  public void unsetIsCurrent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCURRENT_ISSET_ID);
  }

  /** Returns true if field isCurrent is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCurrent() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCURRENT_ISSET_ID);
  }

  public void setIsCurrentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCURRENT_ISSET_ID, value);
  }

  public HField getCompany() {
    return this.company;
  }

  public GeekWork setCompany(HField company) {
    this.company = company;
    return this;
  }

  public void unsetCompany() {
    this.company = null;
  }

  /** Returns true if field company is set (has been assigned a value) and false otherwise */
  public boolean isSetCompany() {
    return this.company != null;
  }

  public void setCompanyIsSet(boolean value) {
    if (!value) {
      this.company = null;
    }
  }

  public HField getPosition() {
    return this.position;
  }

  public GeekWork setPosition(HField position) {
    this.position = position;
    return this;
  }

  public void unsetPosition() {
    this.position = null;
  }

  /** Returns true if field position is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition() {
    return this.position != null;
  }

  public void setPositionIsSet(boolean value) {
    if (!value) {
      this.position = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IS_CURRENT:
      if (value == null) {
        unsetIsCurrent();
      } else {
        setIsCurrent((Boolean)value);
      }
      break;

    case COMPANY:
      if (value == null) {
        unsetCompany();
      } else {
        setCompany((HField)value);
      }
      break;

    case POSITION:
      if (value == null) {
        unsetPosition();
      } else {
        setPosition((HField)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_CURRENT:
      return isIsCurrent();

    case COMPANY:
      return getCompany();

    case POSITION:
      return getPosition();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IS_CURRENT:
      return isSetIsCurrent();
    case COMPANY:
      return isSetCompany();
    case POSITION:
      return isSetPosition();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GeekWork)
      return this.equals((GeekWork)that);
    return false;
  }

  public boolean equals(GeekWork that) {
    if (that == null)
      return false;

    boolean this_present_isCurrent = true;
    boolean that_present_isCurrent = true;
    if (this_present_isCurrent || that_present_isCurrent) {
      if (!(this_present_isCurrent && that_present_isCurrent))
        return false;
      if (this.isCurrent != that.isCurrent)
        return false;
    }

    boolean this_present_company = true && this.isSetCompany();
    boolean that_present_company = true && that.isSetCompany();
    if (this_present_company || that_present_company) {
      if (!(this_present_company && that_present_company))
        return false;
      if (!this.company.equals(that.company))
        return false;
    }

    boolean this_present_position = true && this.isSetPosition();
    boolean that_present_position = true && that.isSetPosition();
    if (this_present_position || that_present_position) {
      if (!(this_present_position && that_present_position))
        return false;
      if (!this.position.equals(that.position))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_isCurrent = true;
    list.add(present_isCurrent);
    if (present_isCurrent)
      list.add(isCurrent);

    boolean present_company = true && (isSetCompany());
    list.add(present_company);
    if (present_company)
      list.add(company);

    boolean present_position = true && (isSetPosition());
    list.add(present_position);
    if (present_position)
      list.add(position);

    return list.hashCode();
  }

  @Override
  public int compareTo(GeekWork other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIsCurrent()).compareTo(other.isSetIsCurrent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCurrent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isCurrent, other.isCurrent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompany()).compareTo(other.isSetCompany());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompany()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company, other.company);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GeekWork(");
    boolean first = true;

    sb.append("isCurrent:");
    sb.append(this.isCurrent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("company:");
    if (this.company == null) {
      sb.append("null");
    } else {
      sb.append(this.company);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("position:");
    if (this.position == null) {
      sb.append("null");
    } else {
      sb.append(this.position);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // alas, we cannot check 'isCurrent' because it's a primitive and you chose the non-beans generator.
    if (company == null) {
      throw new TProtocolException("Required field 'company' was not present! Struct: " + toString());
    }
    if (position == null) {
      throw new TProtocolException("Required field 'position' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (company != null) {
      company.validate();
    }
    if (position != null) {
      position.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GeekWorkStandardSchemeFactory implements SchemeFactory {
    public GeekWorkStandardScheme getScheme() {
      return new GeekWorkStandardScheme();
    }
  }

  private static class GeekWorkStandardScheme extends StandardScheme<GeekWork> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GeekWork struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_CURRENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isCurrent = iprot.readBool();
              struct.setIsCurrentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPANY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.company = new HField();
              struct.company.read(iprot);
              struct.setCompanyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.position = new HField();
              struct.position.read(iprot);
              struct.setPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIsCurrent()) {
        throw new TProtocolException("Required field 'isCurrent' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GeekWork struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_CURRENT_FIELD_DESC);
      oprot.writeBool(struct.isCurrent);
      oprot.writeFieldEnd();
      if (struct.company != null) {
        oprot.writeFieldBegin(COMPANY_FIELD_DESC);
        struct.company.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.position != null) {
        oprot.writeFieldBegin(POSITION_FIELD_DESC);
        struct.position.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GeekWorkTupleSchemeFactory implements SchemeFactory {
    public GeekWorkTupleScheme getScheme() {
      return new GeekWorkTupleScheme();
    }
  }

  private static class GeekWorkTupleScheme extends TupleScheme<GeekWork> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GeekWork struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.isCurrent);
      struct.company.write(oprot);
      struct.position.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GeekWork struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.isCurrent = iprot.readBool();
      struct.setIsCurrentIsSet(true);
      struct.company = new HField();
      struct.company.read(iprot);
      struct.setCompanyIsSet(true);
      struct.position = new HField();
      struct.position.read(iprot);
      struct.setPositionIsSet(true);
    }
  }

}

