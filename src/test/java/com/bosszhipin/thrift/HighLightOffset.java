/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bosszhipin.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-26")
public class HighLightOffset implements org.apache.thrift.TBase<HighLightOffset, HighLightOffset._Fields>, java.io.Serializable, Cloneable, Comparable<HighLightOffset> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HighLightOffset");

  private static final org.apache.thrift.protocol.TField START_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("startIdx", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField END_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("endIdx", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HighLightOffsetStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HighLightOffsetTupleSchemeFactory());
  }

  public int startIdx; // required
  public int endIdx; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    START_IDX((short)1, "startIdx"),
    END_IDX((short)2, "endIdx");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // START_IDX
          return START_IDX;
        case 2: // END_IDX
          return END_IDX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTIDX_ISSET_ID = 0;
  private static final int __ENDIDX_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.START_IDX, new org.apache.thrift.meta_data.FieldMetaData("startIdx", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.END_IDX, new org.apache.thrift.meta_data.FieldMetaData("endIdx", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HighLightOffset.class, metaDataMap);
  }

  public HighLightOffset() {
  }

  public HighLightOffset(
    int startIdx,
    int endIdx)
  {
    this();
    this.startIdx = startIdx;
    setStartIdxIsSet(true);
    this.endIdx = endIdx;
    setEndIdxIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HighLightOffset(HighLightOffset other) {
    __isset_bitfield = other.__isset_bitfield;
    this.startIdx = other.startIdx;
    this.endIdx = other.endIdx;
  }

  public HighLightOffset deepCopy() {
    return new HighLightOffset(this);
  }

  @Override
  public void clear() {
    setStartIdxIsSet(false);
    this.startIdx = 0;
    setEndIdxIsSet(false);
    this.endIdx = 0;
  }

  public int getStartIdx() {
    return this.startIdx;
  }

  public HighLightOffset setStartIdx(int startIdx) {
    this.startIdx = startIdx;
    setStartIdxIsSet(true);
    return this;
  }

  public void unsetStartIdx() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTIDX_ISSET_ID);
  }

  /** Returns true if field startIdx is set (has been assigned a value) and false otherwise */
  public boolean isSetStartIdx() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTIDX_ISSET_ID);
  }

  public void setStartIdxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTIDX_ISSET_ID, value);
  }

  public int getEndIdx() {
    return this.endIdx;
  }

  public HighLightOffset setEndIdx(int endIdx) {
    this.endIdx = endIdx;
    setEndIdxIsSet(true);
    return this;
  }

  public void unsetEndIdx() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDIDX_ISSET_ID);
  }

  /** Returns true if field endIdx is set (has been assigned a value) and false otherwise */
  public boolean isSetEndIdx() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDIDX_ISSET_ID);
  }

  public void setEndIdxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDIDX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case START_IDX:
      if (value == null) {
        unsetStartIdx();
      } else {
        setStartIdx((Integer)value);
      }
      break;

    case END_IDX:
      if (value == null) {
        unsetEndIdx();
      } else {
        setEndIdx((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case START_IDX:
      return getStartIdx();

    case END_IDX:
      return getEndIdx();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case START_IDX:
      return isSetStartIdx();
    case END_IDX:
      return isSetEndIdx();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HighLightOffset)
      return this.equals((HighLightOffset)that);
    return false;
  }

  public boolean equals(HighLightOffset that) {
    if (that == null)
      return false;

    boolean this_present_startIdx = true;
    boolean that_present_startIdx = true;
    if (this_present_startIdx || that_present_startIdx) {
      if (!(this_present_startIdx && that_present_startIdx))
        return false;
      if (this.startIdx != that.startIdx)
        return false;
    }

    boolean this_present_endIdx = true;
    boolean that_present_endIdx = true;
    if (this_present_endIdx || that_present_endIdx) {
      if (!(this_present_endIdx && that_present_endIdx))
        return false;
      if (this.endIdx != that.endIdx)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_startIdx = true;
    list.add(present_startIdx);
    if (present_startIdx)
      list.add(startIdx);

    boolean present_endIdx = true;
    list.add(present_endIdx);
    if (present_endIdx)
      list.add(endIdx);

    return list.hashCode();
  }

  @Override
  public int compareTo(HighLightOffset other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStartIdx()).compareTo(other.isSetStartIdx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartIdx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startIdx, other.startIdx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndIdx()).compareTo(other.isSetEndIdx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndIdx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endIdx, other.endIdx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HighLightOffset(");
    boolean first = true;

    sb.append("startIdx:");
    sb.append(this.startIdx);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endIdx:");
    sb.append(this.endIdx);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // alas, we cannot check 'startIdx' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'endIdx' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HighLightOffsetStandardSchemeFactory implements SchemeFactory {
    public HighLightOffsetStandardScheme getScheme() {
      return new HighLightOffsetStandardScheme();
    }
  }

  private static class HighLightOffsetStandardScheme extends StandardScheme<HighLightOffset> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HighLightOffset struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // START_IDX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startIdx = iprot.readI32();
              struct.setStartIdxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // END_IDX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endIdx = iprot.readI32();
              struct.setEndIdxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStartIdx()) {
        throw new TProtocolException("Required field 'startIdx' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEndIdx()) {
        throw new TProtocolException("Required field 'endIdx' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HighLightOffset struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_IDX_FIELD_DESC);
      oprot.writeI32(struct.startIdx);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_IDX_FIELD_DESC);
      oprot.writeI32(struct.endIdx);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HighLightOffsetTupleSchemeFactory implements SchemeFactory {
    public HighLightOffsetTupleScheme getScheme() {
      return new HighLightOffsetTupleScheme();
    }
  }

  private static class HighLightOffsetTupleScheme extends TupleScheme<HighLightOffset> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HighLightOffset struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.startIdx);
      oprot.writeI32(struct.endIdx);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HighLightOffset struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.startIdx = iprot.readI32();
      struct.setStartIdxIsSet(true);
      struct.endIdx = iprot.readI32();
      struct.setEndIdxIsSet(true);
    }
  }

}

